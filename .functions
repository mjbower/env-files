#new
# inline editing   hold CTRL xe  to edit a multiline command
# use argument from last command   press ALT .     e.g ping 8.8.8.8    mtr ALT .


function enable-dragscreen () {
	defaults write -g NSWindowShouldDragOnGesture -bool true  

	# disable
	# defaults delete -g NSWindowShouldDragOnGesture  

}


function minik-start () {
   # minikube config set vm-driver [driver_name]
   # minikube start --driver=virtualbox
 
    minikube start --cpus 2 --memory 4906
    # Enable dashboard
    minikube addons enable dashboard
    # minikube dashboard --url

    # Enable ingress
    minikube addons enable ingress

	# get external IP
    minikube ip

    # Create an ingress that points at this IP

}

function mb () {
    SESSION_NAME=$1
    echo $1
    shift
osascript <<END
tell application "iTerm"
 tell the first terminal
  launch session "Default Session"
  tell the last session
   write text "cd \"`pwd`\";$1;exit"
  end tell
 end tell
end tell
END
}

function countdown() {  
    local now=$(date +%s)
    local end=$((now + $1))
    while (( now < end )); do   
        printf "%s\r" "$(date -u -j -f %s $((end - now)) +%T)"  
        sleep 0.25  
        now=$(date +%s)
    done  
    echo -en "\a"
}

function getlastsnowjob {
    echo -n "Last Podname = "
    kubectl get pods -l app.kubernetes.io/name=iks-servicenow -n monitoring --sort-by=.metadata.creationTimestamp -o 'jsonpath={.items[-1].metadata.name}'
    echo
    kubectl logs -n monitoring $(kubectl get pods -l app.kubernetes.io/name=iks-servicenow -n monitoring --sort-by=.metadata.creationTimestamp -o 'jsonpath={.items[-1].metadata.name}') | grep There
    # watcher
    # watch "kubectl get pods -l app.kubernetes.io/name=iks-servicenow -n monitoring --sort-by=.metadata.creationTimestamp -o 'jsonpath={.items[-1].metadata.name}' | xargs kubectl logs -n monitoring"
}


function kvlanips () {
    kubectl get cm -n kube-system ibm-cloud-provider-vlan-ip-config -o json \
      | jq -r '.data."vlanipmap.json" as $vlans | $vlans | fromjson | .vlans[] | "\(.id) \(.zone) \(.region) \(.subnets[].is_public) \(.subnets[].cidr) \(.subnets[].ips)"' \
      | sort -k4 \
      | sed 's/true/Public/g; s/false/Private/g' \
      | awk 'BEGIN{print  "VLAN_ID" " " "Zone" " " "Region" " " "Type" " " "CIDR" " " "IPS"} {print $0}' \
      | column -s" " -t
}

function kvlancidrs () {
	kubectl get cm -n kube-system ibm-cloud-provider-vlan-ip-config -o json | jq -r '.data."vlanipmap.json" as $vlans | $vlans | fromjson | .vlans[].subnets[] | select(.is_public==true) | .cidr' |  awk -v RS="" '{$1=$1}7'
}

function dmc () {
    for CM in $(kubectl get cm -ojson | jq -r '.items[].metadata.name')
    do
        echo "Copying Configmap $CM to local file $CM.yaml"
        kubectl get cm $CM -oyaml > $CM.yaml
    done
}

function testallingress () {
    # whip through the ingresses and do a quick curl
    for ns host ipa in $( kubectl get ingress --all-namespaces  -ojson | jq -r '.items[] | select(.metadata.namespace!="kube-system") | "\(.metadata.namespace) \(.spec.rules[].host) \(.status.loadBalancer.ingress[].ip) "')
    do
        #printf "Host $host $ipa $ns---\n"
        echo "curl -H \"Host:$host\" $ipa/actuator/health"
        curl -H "Host:$host" $ipa/actuator/health
        printf "\n\n"
    done
}

function ikshelminstall () {
cat <<EOF | kubectl apply -f -
apiVersion: v1
kind: ServiceAccount
metadata:
 name: tiller
 namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
 name: tiller
roleRef:
 apiGroup: rbac.authorization.k8s.io
 kind: ClusterRole
 name: cluster-admin
subjects:
 - kind: ServiceAccount
   name: tiller
   namespace: kube-system
EOF
	helm init --service-account tiller

}

function ka ()    { kubectl $@ --all-namespaces; }
function kdump () { kubectl $@ -oyaml; }
function krun ()  { name=$1; shift; image=$1; shift; kubectl run -it --generator=run-pod/v1 --image $image $name -- $@; }
function kexec () { pod=$1; shift; kubectl exec -it $pod -- $@; }

function ibmticket () {
    if [ $# -eq 2 ]
	then
		case "$1" in
    		prod)     echo PROD;;
    		nonprod)  echo NONPOD;;
    		*)        echo "Usage:\n\tibmticket (prod|nonprod) clustername\n";exit;
		esac
		echo Yay
	else
		echo "Usage:\n\tibmticket (prod|nonprod) clustername\n"
	fi
	echo PARAMS $#
}

function bxuser () {
    if [ $# -eq 2 ]
    then
        CMD=$1
        USER=$2
        if [[ "$CMD" == "invite" ]]; then
            echo "Invite sent to $USER"
            bx account user-invite $USER  -o AlwaysOnPoC --org-role OrgUser -r eu-de
        elif [[ "$CMD" == "logaccess" ]]; then
            echo "Granting loganalysis access for user $USER"
            bx iam access-group-user-add loganalysis-allregions $USER
        fi
    elif [[ "$1" == "groups" ]]; then
            echo "Listing access groups for user $USER"
            bx iam access-groups
    else
        echo "Usage:  bxuser [ invite | logaccess | groups ]  user@test.com "
    fi
}

olddp () {
	docker build -t "$1" . 
	docker tag $1 de.icr.io/mbo200reg/$1
	docker push de.icr.io/mbo200reg/$1
}


declare -A resgroup
resgroups () {
	while  read -r cname cgroup; do
		resgroup[$cname]=$cgroup
		echo Adding $cname $cgroup
	done < <(ic ks clusters --json | jq -r '.[] |  "\(.name) \(.resourceGroupName)"')
}

function nonprod {
	export IBMCLOUD_API_KEY=${xx1}
	ibmcloud login -r eu-de
	ibmcloud ks clusters
}

function prod {
	export IBMCLOUD_API_KEY=${xx2}
	ibmcloud login -r eu-de
	ibmcloud ks clusters
}

function oldacc {
	export IBMCLOUD_API_KEY=${xx3}
	ibmcloud login -r eu-de
	ibmcloud ks clusters
}

mbmb () {
	#resgroups # call the function to set the global VAR
	
	# useful way to space separate all clusters
	# ixc | grep -Ev 'OK|Name' |  awk -v ORS=' '  '{ print $1 }'
	clusters=( aop-cdt-emea aop-preprod-emea aop-dev-emea aop-servicesdev-emea  )
	clusters=( aop-cdt-apac iamp-cdt-apac )
	# check all the clusters in an account
	clusters=($( ixc | grep -Ev 'OK|Name' |  awk -v ORS=' '  '{ print $1 }' ))
	clusters=( aop-preprod-emea aop-dev-emea aop-cdt-emea aop-preprod-apac aop-cdt-apac )
    clusters=( aop-cdt-apac aop-cdt-emea aop-preprod-amer aop-preprod-apac aop-preprod-emea )
	for c in $clusters; do
		#printf '%s\n' "-------------------------------------------------------------------------------------------------------------------------------------------------"
		#echo Cluster $c
		ixc $c
		# execute all commands against the cluster
		eval $@
		printf '%s\n\n' " -------------------------------------------------------------------------------------------------------------------------------------------------"
	done
}

ixc () {
    if [ $# -eq 0 ]
        then
        /usr/local/bin/bx cs clusters
	else
        FORCE=0
        if [ $# -eq 2 ] && [ "$2" = '-f' ] ; then
            FORCE=1
        fi

        printf "Connecting to Cluster \"$1\""  
		#[[ $FORCE -eq 1 ]] && printf " FORCE "

        kubeconf=( ~/.bluemix/plugins/container-service/clusters/$1/kube-config*.yml(.N) )
        if [ -f $kubeconf ] && [ $FORCE -eq 0 ]; then
            echo " ... Using existing KUBECONF"
            export KUBECONFIG=$kubeconf
        else
            printf " ... retrieving from IBM"
			# this bit gets the right resource group for the unique cluster name
    		declare -A resgroup
    		while  read -r cname cgroup; do
        		resgroup[$cname]=$cgroup
    		done < <(ic ks clusters --json | jq -r '.[] |  "\(.name) \(.resourceGroupName)"')
			printf " ... Targetting RG \"$resgroup[$1]\""
			BXOUT=$(ic target -g $resgroup[$1])

            #CMD=$(/usr/local/bin/bx cs cluster-config $1 | grep "export KUBECONFIG")
			if ! CMD=$(ic ks cluster-config --cluster $1 --export); then
                echo "ERROR: unknown cluster or unable to retrieve from IBM, Resource group issue ?"
                return 1
			fi

            # eval `bx cs cluster-config $1 --export`
            eval $CMD
            print " .. KUBECONFIG=${KUBECONFIG##*/}"
        fi
    fi
}

ixg () {
	echo "Targetting resource group $1"
	ic target -g $1
}

function bxc () {
    if [ $# -eq 0 ]
        then
        /usr/local/bin/bx cs clusters
    else
        FORCE=0
        if [ $# -eq 2 ] && [ "$2" == "-f" ]; then
            FORCE=1
        fi

        printf "Connecting to Cluster \"$1\""
        kubeconf=( ~/.bluemix/plugins/container-service/clusters/$1/kube-config*.yml )
        if [ -f $kubeconf ] && [ $FORCE -eq 0 ]; then
            echo " ... Using existing KUBECONF"
            export KUBECONFIG=$kubeconf
        else
            echo " ... retrieving from IBM"
            CMD=$(/usr/local/bin/bx cs cluster-config $1 | grep "export KUBECONFIG")
            ret=$?
            if [ $ret -ne 0 ]; then
                echo "ERROR: unknown cluster or unable to retrieve from IBM"
                return 1
            fi
            # eval `bx cs cluster-config $1 --export`
            $CMD
            echo KUBECONFIG=$KUBECONFIG
        fi
    fi
}

#-------persistent commands-----------------------------------------
function log_bash_persistent_history()
{
  [[
    $(history 1) =~ ^\ *[0-9]+\ +([^\ ]+\ [^\ ]+)\ +(.*)$
  ]]
  local date_part="${BASH_REMATCH[1]}"
  local command_part="${BASH_REMATCH[2]}"
  if [ "$command_part" != "$PERSISTENT_HISTORY_LAST" ]
  then
    echo $date_part "|" "$command_part" >> ~/.persistent_history
    export PERSISTENT_HISTORY_LAST="$command_part"
  fi
}

# Stuff to do on PROMPT_COMMAND
function run_on_prompt_command()
{
    log_bash_persistent_history
}
#-------------------------------------------------------------------

function cluster-nodes () {
    for c in `ibmcloud cs clusters --json | jq -r '.[].name'`
    do
		ibmcloud cs cluster config --cluster $c
        printf "Cluster =  $c"
        kubectl get nodes
    done
}

function cluster-ingress-secrets () {
    clusters=`bx cs clusters --json | jq -r .[].name`
    for c in ${clusters[@]}; 
    do
        printf "Cluster = %-30s Secret = " $c
        bx cs cluster-get $c --json | jq -r ' .ingressSecretName'
    done
}

nmap-kube ()
{
    nmap --open -T4 -A -v -Pn -p 443,2379,4194,6782-6784,6443,8443,8080,9099,10250,10255,10256 "${@}"
}

nmap-kube-discover () {
    local LOCAL_RANGE=$(ip a | awk '/eth0$/{print $2}' | sed 's,[0-9][0-9]*/.*,*,');
    local SERVER_RANGES=" ";
    SERVER_RANGES+="10.0.0.1 ";
    SERVER_RANGES+="10.0.1.* ";
    SERVER_RANGES+="10.*.0-1.* ";
    nmap-kube ${SERVER_RANGES} "${LOCAL_RANGE}"
    # e.g nmap-kube-discover x.x.x.x
}

function jprx() {
  if [[ "$1" == "on" ]]; then
  RNR=$(($RANDOM%2))
    ssh -M -S /tmp/zproxy -A -N -f -D 8808 -oProxyCommand="ssh -W %h:%p xxxx$RNR" xxxxxx
    sudo networksetup -setautoproxyurl Wi-Fi file:///Users/martin/Documents/proxy.pac
  elif [[ "$1" == "off" ]]; then
    ssh -S /tmp/zproxy -O exit xxx638
    sudo networksetup -setautoproxystate Wi-Fi off
  fi
}

function bxci () {
    clusters=`bx cs clusters --json | jq -r .[].name`
    C=1
    for cls in ${clusters[@]}; do
        echo "$C: $cls"
        cllist[$C]=$cls
        C=$((C+1))
    done
    read -p 'Choose a Cluster: ' REPLY
    if ((REPLY >= 1 && REPLY <= C-1)); then
        echo "Switching to ${cllist[$REPLY]}"
        #$(bx cs cluster-config --export ${cllist[$REPLY]})
        CMD=$(/usr/local/bin/bx cs cluster-config ${cllist[$REPLY]} | grep "export KUBECONFIG")
        # eval `bx cs cluster-config $1 --export`
        $CMD
        echo KUBECONFIG=$KUBECONFIG
    else
        echo "Invalid response, try again!!"
    fi
}

jprx ()
{
    if [[ "$1" == "on" ]]; then
        RNR=$(($RANDOM%2));
        ssh -M -S /tmp/zproxy -A -N -f -D 8808 -oProxyCommand="ssh -W %h:%p xxxx4$RNR" xxxxx006638;
        sudo networksetup -setautoproxyurl Wi-Fi file:///Users/cian/.zproxy/proxy.pac;
    else
        if [[ "$1" == "off" ]]; then
            ssh -S /tmp/zproxy -O exit xxxx6638;
            sudo networksetup -setautoproxystate Wi-Fi off;
        fi;
    fi
}

function bad_subnets () {
    declare -A cl
    while  read -r cid cname; do
        cl[$cid]=$cname
    done < <(bx cs clusters --json | jq -r '.[] | "\(.id) \(.name)"')

    while  read -r cid; do
        echo Bad Cluster found with incorrectly assigned subnets "${cl[$cid]}" $cid
    done < <( bx cs subnets --json | jq -r '.[] | select (.properties.subnet_type == "additional_primary" and .properties.bound_cluster != "") | ( .properties.bound_cluster)')
}

function ciam_vlans () {
    declare -A cl
    while  read -r cid cname; do
        cl[$cid]=$cname
    done < <(bx cs clusters --json | jq -r '.[] | "\(.id) \(.name)"')

    while  read -r cid ctype; do
        echo "Clusters assigned to cIAM VLANS ($ctype) ${cl[$cid]}" $cid
    done < <( bx cs subnets --json | jq -r '.[] | select (.vlan_id == ("2297815","2297823","2297821","2297825", "2296129","2296183")) | "\(.properties.bound_cluster) \(.type)"' )
}

function kref () {
    CLUSTER_DIR=$HOME/.bluemix/plugins/container-service/clusters

    count=0
    for i in `ls $CLUSTER_DIR` ;
    do
        printf "\t$i\n"
        YAML=$(ls $CLUSTER_DIR/$i/kube*)
        #printf "\t\t$YAML\n"
    
        if [ $count -eq 0 ]; then TKC=$YAML; else TKC=$TKC:$YAML; fi
    
        count=$[$count + 1]
        ##if [ $count -gt 2 ] ;then break; fi
    done
    echo
    echo export KUBECONFIG=$TKC | pbcopy
    printf '\e[1;33m%-6s\e[m' "export KUBECONFIG=$TKC"
    echo
}

create_namespace() {
    if [ $# -lt 1 ]
    then
            echo "Please pass namespace name."
            return 1
    fi

    echo $1

    kubectl create namespace $1

    kubectl label namespace/$1 component=$1

    kubectl get sa default --namespace "default" -o json | jq -r .imagePullSecrets[].name | while read imagePullSecret
	do
		echo "Copying image pull secret $imagePullSecret"
		kubectl get secret $imagePullSecret --namespace "default" -o json | jq --arg v "$1" '.metadata.namespace = $v' | kubectl create -f -
	done

    secrets='{"imagePullSecrets":'`kubectl get sa default --namespace "default" -o json | jq -r .imagePullSecrets`"}"
    echo $secrets
    kubectl patch sa default --namespace $1 -o json -p="$secrets"

    return 0
}

copy_secrets() {
    if [ $# -lt 1 ]
    then
            echo "Usage: copy_secrets <from_namespace> <to_namespace> <secToCopy1> <secToCopy2> ."
            return 1
    fi

    for sec in ${@:3}
    do
	echo "$sec"
        kubectl get secret $sec --namespace $1 -o json | jq --arg v "$2" '.metadata.namespace = $v' | kubectl create -f -
    done

    return 0
}

# Label all the namespaces with their names
label_all_namespaces() {
    kubectl get namespace -o json | jq -r .items[].metadata.name | while read name
    do
        echo "Labelling namespaces to set network policies."
        kubectl label namespace/$name component=$name --overwrite=true
    done
}


function bxcn () {
    if [ $# -eq 0 ]
        then
        /usr/local/bin/bx cs clusters
    else
        # check for file existence, download it if not !?!?
        #[[ ! -d /Users/martin/.bluemix/plugins/container-service/clusters/$1 ]] 
        #[[ ! -f  $(find /Users/martin/.bluemix/plugins/container-service/clusters/$1/kube* -type f)[0]  ]] && {
        [[ ! -f  $(find /Users/martin/.bluemix/plugins/container-service/clusters/$1/kube* -type f)  ]] && {
            echo "There is no file"
        };
        echo THERE is a file
        sleep 5
        local FILE="${1:-}";
        [[ ! -f "${FILE}" ]] && {
            echo "kubesec: ${FILE}: No such file" >&2;
            return 1
        };
        arr=( $(find /Users/martin/.bluemix/plugins/container-service/clusters/$1/kube* -type f) )
        echo export KUBECONFIG=${arr[0]}
        export KUBECONFIG=${arr[0]}

    fi
}

function bxs () {
    declare -A dcmap
    dcmap["Washington"]="https://us-east.containers.bluemix.net"
    dcmap["Singapore"]="https://ap-north.containers.bluemix.net"
    dcmap["Amsterdam"]="https://eu-central.containers.bluemix.net"
    dcmap["UK"]="https://uk-south.containers.bluemix.net"
    dcmap["Global"]="https://containers.bluemix.net"
#AP North endpoint: https://ap-north.containers.bluemix.net
#AP South endpoint: https://ap-south.containers.bluemix.net
#EU Central endpoint: https://eu-central.containers.bluemix.net
#UK South endpoint: https://uk-south.containers.bluemix.net
#US East endpoint: https://us-east.containers.bluemix.net
#US South endpoint: https://us-south.containers.bluemix.net
    
    C=1
    for key in ${!dcmap[@]}; do
        echo "$C: $key"
        dclist[$C]="${dcmap[$key]}"
        C=$((C + 1))
    done
    read -p 'Choose a DC: ' REPLY
    if ((REPLY >= 1 && REPLY <= C-1)); then
        echo "${dclist[$REPLY]}"
        bx cs init --host "${dclist[$REPLY]}"
        bx cs clusters
    else
        echo "Invalid response, try again"
    fi
}

kubesec ()
{
    local FILE="${1:-}";
    [[ ! -f "${FILE}" ]] && {
        echo "kubesec: ${FILE}: No such file" >&2;
        return 1
    };
    curl --silent \
      --compressed \
      --connect-timeout 5 \
      -F file=@"${FILE}" \
      https://kubesec.io/
}

function bxcfg () {
    for CLUSTER in $(bx cs clusters --json | jq -r '.[] .name')
    do
        echo "Refreshing KUBECONFIG for cluster $CLUSTER"
        eval `bx cs cluster-config $CLUSTER --export`
    done
}

function bxallpods () {
    for CLUSTER in $(bx cs clusters --json | jq -r '.[] .name')
    do
        echo "CLUSTER $CLUSTER"
        eval `bx cs cluster-config $CLUSTER --export`
        kubectl get pods --all-namespaces
        echo "---"
        echo
    done
}

function bxall () {
    echo "Executing $1"
    for CLUSTER in `bx cs clusters --json | jq --raw-output '.[] .name '`
    do
        echo CLUSTER $CLUSTER
        CMD=$(/usr/local/bin/bx cs cluster-config $1 | grep "export KUBECONFIG")
        $CMD
        bxc $CLUSTER
        $1
        #bx account space-role-set $USER_ID $ORG $SPACE $ROLE
    done
}

function ikchk() {
    declare -A dcmap
    dcmap["Washington"]="https://us-east.containers.bluemix.net"
    dcmap["Singapore"]="https://ap-north.containers.bluemix.net"
    dcmap["Amsterdam"]="https://eu-central.containers.bluemix.net" 

    clusterList=''
    separator=''
    for key in ${!dcmap[@]}; do
        bx cs init --host "${dclist[$key]}" -s
        invalidClusters=`bx cs clusters --json | jq '.[] | select (.targetVersion != .masterKubeVersion) | { "name": .name, "cv": .masterKubeVersion, "tv": .targetVersion}' | jq -s '.'`
        clusterList=$clusterList$separator$invalidClusters
        separator=','
    done

    echo $clusterList | jq '.'
}

function bxversions () {
    for CLUSTER in `bx cs clusters --json | jq --raw-output '.[] .name '`
    do
        echo CLUSTER $CLUSTER
        printf "\tMaster = "
        /usr/local/bin/bx cs cluster-get $CLUSTER --json | jq -r '.masterKubeVersion'
        printf "\tPools = "
        bx cs worker-pools --cluster $CLUSTER --json | jq -r '.[] | "\(.name) \(.sizePerZone) \(.zones[].workerCount)"'
        #/usr/local/bin/bx cs workers --cluster $CLUSTER --json | jq -r '.[] .kubeVersion' | awk 'NR > 1 { printf(",") } {printf "%s  ",$0}'
        /usr/local/bin/bx cs workers --cluster $CLUSTER --json | jq -r '.[] .kubeVersion' | awk 'NR > 1 {printf "\tWorker = %s \n ",$0}'
        echo
    done
}

function bxworkers () {
    echo "Executing $1"
    for CLUSTER in `bx cs clusters --json | jq --raw-output '.[] .name '`
    do
        echo CLUSTER $CLUSTER
        /usr/local/bin/bx cs workers $CLUSTER --json |jq -r ' .[] | "\(.id) \(.state) \(.status)"'
        #bx account space-role-set $USER_ID $ORG $SPACE $ROLE
    done
}

function refresh_iks () {
    for c in $( ibmcloud cs clusters --json | jq -r 'sort_by(.name) | .[] |  "\(.name)/\(.id)"' )
    do
        b=`echo $c | awk ' { split($0,a,"/"); print a[1] }'`
        echo cluster = $b
        ibmcloud cs cluster config --cluster $b
    done

}

function refresh-all-pods() {
  # taken from https://gist.github.com/jmound/ff6fa539385d1a057c82fa9fa739492e
  echo
  DEPLOYMENT_LIST=$(kubectl -n $1 get deployment -o json|jq -r .items[].metadata.name)
  green "Refreshing pods in all Deployments"
  for deployment_name in $DEPLOYMENT_LIST ; do
    TERMINATION_GRACE_PERIOD_SECONDS=$(kubectl -n $1 get deployment "$deployment_name" -o json|jq .spec.template.spec.terminationGracePeriodSeconds)
    if [ "$TERMINATION_GRACE_PERIOD_SECONDS" -eq 30 ]; then
      TERMINATION_GRACE_PERIOD_SECONDS='31'
    else
      TERMINATION_GRACE_PERIOD_SECONDS='30'
    fi
    patch_string="{\"spec\":{\"template\":{\"spec\":{\"terminationGracePeriodSeconds\":$TERMINATION_GRACE_PERIOD_SECONDS}}}}"
    kubectl -n $1 patch deployment $deployment_name -p $patch_string
  done
  echo
}

# Make directory and enter it
function mkd () {
  mkdir -p "$@" && cd "$_";
}

# Copy website and its contents
function copy_website () {
  wget -e robots=off -p -k "$1"
}

# Extract most know archives with one command
extract () {
  if [ -f $1 ] ; then
    case $1 in
      *.tar.bz2)   tar xjf $1     ;;
      *.tar.gz)    tar xzf $1     ;;
      *.bz2)       bunzip2 $1     ;;
      *.rar)       unrar e $1     ;;
      *.gz)        gunzip $1      ;;
      *.tar)       tar xf $1      ;;
      *.tbz2)      tar xjf $1     ;;
      *.tgz)       tar xzf $1     ;;
      *.zip)       unzip $1       ;;
      *.Z)         uncompress $1  ;;
      *.7z)        7z x $1        ;;
      *)     echo "'$1' cannot be extracted via extract()" ;;
    esac
  else
    echo "'$1' is not a valid file"
  fi
}

# nice timeout function to fail after x seconds
# e.g    timeout 5 bash -c "cat < /dev/null > /dev/tcp/10.115.66.59/9043"
function timeout() { perl -e 'alarm shift; exec @ARGV' "$@"; }

# Determine size of a file or total size of a directory
function fs () {
  if du -b /dev/null > /dev/null 2>&1; then
    local arg=-sbh
  else
    local arg=-sh
  fi

  if [[ -n "$@" ]]; then
    du $arg -- "$@"
  else
    du $arg .[^.]* *
  fi
}

function azcmd () {
	az acr import -n nxtcrshared --source flowplanner-management-security-suite_server:flowplanner-management-security-suite-api_20210818.2 -t flowplanner-management-security-suite_server:flowplanner-management-security-suite-api_20210818.2 \
    --subscription " LS DevOps Flow Planner Prod 01" \
    -r /subscriptions/xxxxx-xxxxxx-xxxxx/resourceGroups/nxt-core-rg-dev2/providers/Microsoft.ContainerRegistry/registries/nxtcrdev2
}

function remove_falcon () {

#https://developer.apple.com/documentation/security/disabling_and_enabling_system_integrity_protection
#Disable SIP first
#
#sudo systemextensionsctl list - this will show you enabled extensions, to disable you need to do it like this:
#systemextensionsctl uninstall xx com.microsoft.wdav.netext
#systemextensionsctl uninstall xx com.microsoft.wdav.epsext
#systemextensionsctl uninstall xx com.crowdstrike.falcon.Agent
#this first ID might be unique and you will see it with list command
#
#sudo rm -rf /var/db/ConfigurationProfiles
#sudo rm -rf /Library/Managed\ Preferences
#sudo rm -rf /Applications/Enterprise\ Client\ Connector.app
#sudo rm -rf /Applications/Microsoft\ Defender\ ATP.app
#sudo rm -rf /Applications/Falcon.app
#
#
#reboot, check everything is gone, if not repeat the steps
#reenable SIP, reboot again

#pwpolicy -clearaccountpolicies
}

function fix_routing () {
#
#bash-5.0$ ip route show table 210
#10.115.66.0/23 via 10.135.59.195 dev eth0
#bash-5.0$ sudo /sbin/ip route delete 10.115.66.0/23 table 210
#bash-5.0$ sudo /sbin/ip route add 10.115.66.0/23 via 10.135.59.247 dev eth0 table 210
#bash-5.0$ ip route show table 210
#10.115.66.0/23 via 10.135.59.247 dev eth0
#bash-5.0$ exit
#exit
}
